export const scriptTemplates = [
  {
    script:
      'process {{id}} {\n  cpus "${params.{{id}}Cpu}"\n  memory "${params.{{id}}Memory}"\n  queue "${params.{{id}}Queue}"\n \n  errorStrategy { sleep(Math.pow(3, task.attempt) * 1000 as long); return \'retry\' }\n  maxRetries 3\n  publishDir "${params.outputBucket}/${params.userid}/${params.jobid}/{{id}}"\n  resourceLabels jobID: \'{{jobid}}\', userID: \'{{userid}}\', app: \'{{apptag}}\', service_tagged: \'batch\', stage: "${params.stage}", processID: \'{{id}}\'\n  container "public.ecr.aws/e9z9p5l1/biotailer-samtools-amd64"\n  containerOptions ""\n\n  {{inputs}}\n\n  output:\n  path \'results/unsorted_bam.bam\', emit: unsorted_bam\n  path \'results/sorted_bam.bam\', emit: sorted_bam\n  path \'results/sorted_bam_bai.bai\', emit: sorted_bam_bai\n  path \'results/fasta.fa\', emit: fasta\n  path \'results/fasta_fai.fai\', emit: fasta_fai\n\n  script:\n  tag_script = """\n    # Obtain the IMDSv2 token\n    TOKEN=\\$(wget --header="X-aws-ec2-metadata-token-ttl-seconds: 21600" --method=PUT -qO- "http://169.254.169.254/latest/api/token")\n\n    # Use the token to fetch the instance ID\n    INSTANCE_ID=\\$(wget --header="X-aws-ec2-metadata-token: \\$TOKEN" -qO- "http://169.254.169.254/latest/meta-data/instance-id")\n\n    # Retrieve the EBS volume IDs\n    VOLUME_IDS=\\$(aws ec2 describe-instances --instance-ids \\$INSTANCE_ID --query \'Reservations[].Instances[].BlockDeviceMappings[].Ebs.VolumeId\' --region us-east-1 --output text)\n\n    # Tag the EBS volumes\n    if [ -n \\$VOLUME_IDS ]; then\n        for VOLUME_ID in \\$VOLUME_IDS; do\n            aws ec2 create-tags --resources \\$VOLUME_ID --tags Key=userID,Value=${params.userid} Key=jobID,Value=${params.jobid} Key=service_tagged,Value=ebs Key=stage,Value=${params.stage} --region us-east-1\n        done\n    else\n        echo "Error: No EBS volume found for instance ID \\$INSTANCE_ID"\n    fi\n    """\n  return ("mkdir -p results && " +\n    tag_script +\n  """\n  samtools view -S -b -o results/unsorted_bam.bam ${{sam}} &&\n  samtools sort -o results/sorted_bam.bam results/unsorted_bam.bam &&\n  samtools index results/sorted_bam.bam &&\n  mv results/sorted_bam.bam.bai results/sorted_bam.bai\n  samtools faidx ${{ref}}\n  """\n  )\n}',
    singleOrPair: "both",
    toolid: "igv",
  },
];
